-> Definition:
      Ensures bifurcation between codebase and 3rd party components/libraries/Systems and keeps codebase loose coupled so that it
      is easily maintainable and upgradable. 

-> How to use?
      Your codebase should never give access directly to 3rd party resources. You should always use an interface.

-> I know you couldn't able to understand. Let me explain with the iPhone adapter. In the USA ports of switch is rectangular
   in India it is circular. So if you buy an adapter from India and you want to use it in the USA you should have a converter adapter.

----Third-party package

      public class HdfcAPI {
          public String DoPayment(long fromID, long toId, int amount){
              System.out.println("Money has been transfered");
              return "Successful";
          }
          public boolean authentication(long accountId){
              return true;
          }
          public int checkBalance(long accountId){
              return 1000000;
          }
      
      }

      public class YesBankAPI {
          public char transferMoney(String toUser, String fromUser, int amount){
              System.out.println("Money has been transfered");
              return 'D';
          }
          public char authentication(String userDetails){
              return 'Y';
          }
          public int checkBalance(String userDetails){
              return 1000000;
          }
      
      }

----Interface
      public interface BankAPIAdapter {
          public String transferMoney(String fromUser, String toUser, int amount);
          public boolean autheticate(String userDetails);
          public double checkBalance(String userDetails);
      }

----Adapter

      public class HdfcAdapter implements BankAPIAdapter{
          private HdfcAPI hdfcAPI;
          public HdfcAdapter() {
              this.hdfcAPI= new HdfcAPI();
          }
      
          @Override
          public String transferMoney(String fromUser, String toUser, int amount) {
              long fromUserId=returnIdFromUserName(fromUser);
              long toUserId=returnIdFromUserName(toUser);
              return hdfcAPI.DoPayment(fromUserId,toUserId,amount);
          }
      
          @Override
          public boolean autheticate(String userDetails) {
              long userDetailsId=returnIdFromUserName(userDetails);
              return hdfcAPI.authentication(userDetailsId);
          }
      
          @Override
          public double checkBalance(String userDetails) {
              long userDetailsId=returnIdFromUserName(userDetails);
              return hdfcAPI.checkBalance(userDetailsId);
          }
          private long returnIdFromUserName(String userName){
              return 0;
          }
      }
      
      public class yesBankAdapter implements BankAPIAdapter{
          private YesBankAPI yesbankapi;
      
          public yesBankAdapter(YesBankAPI yesbankapi) {
              this.yesbankapi = new YesBankAPI();
          }
      
          @Override
          public String transferMoney(String fromUser, String toUser, int amount) {
              char result= yesbankapi.transferMoney(fromUser, toUser,(int) amount);
              if(result=='D'){
                  return "success";
              }
              return "failure";
          }
      
          @Override
          public boolean autheticate(String userDetails) {
              return yesbankapi.authentication(userDetails)=='Y';
      
          }
      
          @Override
          public double checkBalance(String userDetails) {
              return yesbankapi.checkBalance(userDetails);
          }
      }

      public class phonepay implements BankAPIAdapter {
          private BankAPIAdapter bankAPIAdapter;
      
          public phonepay(BankAPIAdapter bankAPIAdapter) {
              this.bankAPIAdapter = new HdfcAdapter();
          }
      
          @Override
          public String transferMoney(String fromUser, String toUser, int amount) {
              return bankAPIAdapter.transferMoney(fromUser,toUser,amount);
          }
      
          @Override
          public boolean autheticate(String userDetails) {
              return bankAPIAdapter.autheticate(userDetails);
          }
      
          @Override
          public double checkBalance(String userDetails) {
              return bankAPIAdapter.checkBalance(userDetails);
          }
      }





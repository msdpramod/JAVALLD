-> Definition
    The Flyweight pattern is a structural design pattern used in software engineering to optimize the memory
    usage or computational efficiency of an application, especially when dealing with a large number of similar
    objects. We bifurcate the class into attributes to the related classes. 

->Why do we use it?
    Consider the game 'PUBG' it consists of 10 players with 4 guns and bullets. Each person has 300 bullets 
    at the beginning of the game and we can collect the bullets in between the game if we kill others. 
    consider the following example.

    
public class Bullet {
     double radius;
    double weight;
    int maxDamage;
    int range;
    double length;
    int color;
    double speed;
    direction xiyjzk;
    byte image;
    direction targetcordinates;
    direction currentcordinates;
}
class direction{
    int x;
    int y;
    int z;

    public direction(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}
we can see attributes if we calculate memory occupied it would be around 1.1kB in PUBG total number of bullets 
would be around 1.1 * 10^3 * 10^8 = 100 MB. That means only bullets occupy the memory of 100MB which isn't best 
practice to configure.

we use extrinsic (changes with external factors) and intrinsic classes (constant values). so we just separate
classes based on nature. If we do so we would memory optimize.

public class Bullet1 {
    double speed;
    direction xiyjzk;
    direction currentCoordinates;

    direction targetcordinates;
    BulletType bulletType;


}
This class which is extrinsic occupies 88B 

public class BulletType {
    double radius;
    double weight;
    int maxDamage;
    int range;
    double length;
    int color;
    byte image;
}

It occupies a total of 10MB memory.

    

-> Definition
      Subtypes must be substitutable for their base types without affecting the correctness of the program.
      
      In other words the class derived from another class the child or sub class should't be responsible for
      changes in parent class. It follows Polymorphism ( Method Over riding)

    From Open closed Principle we added swimingBird class which extend to Bird then changes made in swimmingBird
    class doesn't affect Bird class.

    Let me explain with different example where parent class bird holding method fly and different birds inherit and
    override the method.

        class Bird {
            public void fly() {
                System.out.println("Bird is flying.");
            }
        }
        
        class Sparrow extends Bird {
            @Override
            public void fly() {
                System.out.println("Sparrow is flying.");
            }
        }
        
        class Ostrich extends Bird {
            @Override
            public void fly() {
                // Ostriches cannot fly, so we override the method to indicate that.
                System.out.println("Ostrich cannot fly.");
            }
        }

        public class BirdDemo {
            public static void main(String[] args) {
                Bird bird1 = new Sparrow();
                Bird bird2 = new Ostrich();
        
                bird1.fly(); // Outputs: Sparrow is flying.
                bird2.fly(); // Outputs: Ostrich cannot fly.
            }
        }

        The BirdDemo class demonstrates that objects of derived classes (Sparrow and Ostrich) can be used interchangeably
        with objects of the base class (Bird) without causing issues. This adheres to the Liskov Substitution Principle.

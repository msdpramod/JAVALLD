-> Definition: Strategy is a behavioral design pattern that lets you define a family of algorithms, put each of them into a separate class,
   and make their objects interchangeable.

-> Basically to avoid if else which breaks SRP and OCP we use a strategy pattern where we create factory and singleton.

   public interface pathCalculatorStrategy {
     public void findPath(String source, String destination);
   }

   public class bikePathCalculatorStrategy implements pathCalculatorStrategy{
      private static bikePathCalculatorStrategy instance;
  
      private bikePathCalculatorStrategy() {
      }
      public static bikePathCalculatorStrategy getInstance(){
          if(instance==null){
              synchronized (bikePathCalculatorStrategy.class){
                  if(instance==null){
                      instance=new bikePathCalculatorStrategy();
                  }
              }
          }
          return instance;
      }
  
      @Override
      public void findPath(String source, String destination) {
          System.out.println("Path calculation via bike from : " + source + " to " + destination );
      }
  }

  public class carPathCalculatorStrategy implements pathCalculatorStrategy{
      private static carPathCalculatorStrategy instance;
  
      private carPathCalculatorStrategy() {
      }
      public static carPathCalculatorStrategy getInstance(){
          if(instance==null){
              synchronized (carPathCalculatorStrategy.class){
                  if(instance==null){
                      instance=new carPathCalculatorStrategy();
                  }
              }
          }
          return instance;
      }
  
      @Override
      public void findPath(String source, String destination) {
          System.out.println("Path calculation via Car from : " + source + " to " + destination );
      }
  }

  public class walkPathCalculatorStrategy implements pathCalculatorStrategy{
      private static walkPathCalculatorStrategy instance;
  
      private walkPathCalculatorStrategy() {
      }
      public static walkPathCalculatorStrategy getInstance(){
          if(instance==null){
              synchronized (walkPathCalculatorStrategy.class){
                  if(instance==null){
                      instance=new walkPathCalculatorStrategy();
                  }
              }
          }
          return instance;
      }
  
      @Override
      public void findPath(String source, String destination) {
          System.out.println("Path calculation via walk from : " + source + " to " + destination );
      }
  }

  public enum TransportaionMode {
      CAR,
      BIKE,
      WALK
  }

  public class pathCalculatorFactory {
    public static pathCalculatorStrategy getPathCalculator(TransportaionMode mode){
        return switch (mode){
            case CAR -> carPathCalculatorStrategy.getInstance();
            case BIKE -> bikePathCalculatorStrategy.getInstance();
            case WALK -> walkPathCalculatorStrategy.getInstance();
        };
    }

  }

  public class Maps {
    public void getPath(String source, String destination, TransportaionMode mode){
        pathCalculatorStrategy path= pathCalculatorFactory.getPathCalculator(mode);
        path.findPath(source,destination);
    }
  }

  public class client {
    public static void main(String[] args) {
        Maps maps= new Maps();
        maps.getPath("hyderabad","chennai", TransportaionMode.BIKE);
    }
  }


  



     
    

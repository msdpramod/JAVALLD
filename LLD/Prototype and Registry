-> Requirements
        Given an Object, we have to create multiple deep copies ( creating a new object with the same attributes as the original )

-> Version 1:
    class Client{
        public static void main(String args[]){
            Student s= new Student():
            Student copy= s; ---->( It doesn't work as we are copy reference which is the address)
        }
     }

-> Version 2:
    class Client{
            public static void main(String args[]){
                Student s= new Student();
                Student copy= new Student();
                copy.id= s.id;
                copy.name= s.name;
                copy.batch= copy.batch;
            }
         }
    }

    Cons: 1: Too lengthy code.
          2: The client needs to know implementation details like attributes of the Student class.
          3. Student classes might have some private attributes so client classes cannot access them.
          4. class  Student{
                int id;
                String name;
                String batch;
                int roll;
             }
             
             class IntelligentStudent extends Student{
                int iq;
             }
             
             class client{
                 public static void main(String args[]){
                    Student s= new Student();
                            or
                    Student s= new IntelligentStudent();
                 }
             }    
          Either of the classes can have full properties.
    
-> can we do it with a copy constructor?
        class  Student{
           int id;
           String name;
           String batch;
           int roll;
           public Student (int id, String name, String batch, int roll){
                this.id=id;
                this.name=name;
                this.batch=batch;
                this.roll=roll;
           }
       }
       class IntelligentStudent extends Student{
            public IntelligentStudent( IntelligentStudent it){
                Super(it);
                this.iq= it.iq;
       }

       Even here we can't get full properties

       Let's modify the Client code

       class Client{
            public static void main(String args[]){
                Student s= new Student();
                if(s instanceOf Student){
                    Student copy= new Student();
                }
                else{
                    Student copy= new IntegllientStudent();
                }
       }

       Here we are violating SRP, and OCP principles as in the Student class we are creating more than one change and it is not modification.

->Version 5:
        class Client{
            public static void main(String args[]){
                Student s= new Student();
                if(s instanceOf Student){
                    Student copy= new Student();
                }
                else{
                    Student copy= new IntegllientStudent();
                }
            }
        }
       Here we are violating SRP, and OCP principles as in Student class we are creating more than
       one change and it is not modification.
       If the client wants to create an object the logic of copy shouldn't be present in the client.

->version 6: Copy method

            class Client{
                public static void main(String args[]){
                    Student s= new Student();
                    Student copy=s.copy();
                }
            }

            Even though it follows solid principles and is loosely coupled we need to make sure all the  child
            classes of student class should definitely override the copy method.

-> ProtoType Definition:
        let's consider a company class where certain details should be mandatory to copy for every employee

        public class Employee {
            private String name;
            private String branchName;
            private int presentDays;

            private String Country;
            private int yearOfJoining;
            private String sector;

            public Employee() {
            }
            public Employee copy(){
                Employee e= new Employee();
                e.Country=this.Country;
                e.sector=this.sector;
                e.branchName=this.branchName;
                return e;
            }

            public Employee(String name, String branchName, int presentDays,String country, int yearOfJoining, String sector) {
                this.name = name;
                this.branchName = branchName;
                this.presentDays = presentDays;
                this.Country = country;
                this.yearOfJoining = yearOfJoining;
                this.sector = sector;
            }

            public String getName() {
                return name;
            }

            public String getBranchName() {
                return branchName;
            }

            public int getPresentDays() {
                return presentDays;
            }


            public String getCountry() {
                return Country;
            }

            public int getYearOfJoining() {
                return yearOfJoining;
            }

            public String getSector() {
                return sector;
            }

            public void setName(String name) {
                this.name = name;
            }

            public void setBranchName(String branchName) {
                this.branchName = branchName;
            }

            public void setPresentDays(int presentDays) {
                this.presentDays = presentDays;
            }


            public void setCountry(String country) {
                Country = country;
            }

            public void setYearOfJoining(int yearOfJoining) {
                this.yearOfJoining = yearOfJoining;
            }

            public void setSector(String sector) {
                this.sector = sector;
            }

            @Override
            public String toString() {
                return "Employee{" +
                        "name='" + name + '\'' +
                        ", branchName='" + branchName + '\'' +
                        ", presentDays=" + presentDays +
                        ", Country='" + Country + '\'' +
                        ", yearOfJoining=" + yearOfJoining +
                        ", sector='" + sector + '\'' +
                        '}';
            }
        }


-> Registry Definition:
        Maintaining too many prototypes becomes a big problem so to manage all prototypes we use the Registry

        public class Registry {
            private HashMap<String,Employee> map;

            public Registry() {
                map= new HashMap<>();
            }
            public void register(String key, Employee prototype){
                map.put(key, prototype);
            }
            public Employee get(String key){
                return map.get(key);
            }
        }

        public class ClientPrototype {
            public static void main(String[] args) {
                Employee oracle = new Employee();
                oracle.setCountry("India");
                oracle.setBranchName("IT");
                oracle.setSector("South Zone");

                Employee HyderabadEmployee= oracle.copy();
                HyderabadEmployee.setName("pramod");
                HyderabadEmployee.setPresentDays(300);
                HyderabadEmployee.setYearOfJoining(2017);

                System.out.println(HyderabadEmployee.toString());

                Employee BangloreEmployee= oracle.copy();
                BangloreEmployee.setName("sid");
                BangloreEmployee.setPresentDays(250);
                BangloreEmployee.setYearOfJoining(2019);

                System.out.println(BangloreEmployee.toString());

            }
        }






        

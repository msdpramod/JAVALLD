A set of guidelines that helps Software engineers to design software systems.

S.O.L.I.D -> This is an acronym for 

-> Single Responsible Principle
-> Open Close Principle
-> Liskov Substitution
-> Interface Segregation
-> Dependency Inversion 

Using these Solid principles helps in
-> Extensible
-> Maintainable
-> Reliable
-> Easily Testable
-> Modular
-> Understandable

Let us Learn the Solid principles with Birds, Birds? Sounds crazy right?
Naah, Let me clarify with Bird Example

Let me code a Bird that has a name, color, fly
In this example,

Storing bird attributes (name, color, fly).
Displaying bird information.
Managing bird flying behavior.
Managing bird singing behavior.
This class violates the SRP because it has more than one reason to change. If you need to modify the way birds sing 
or add new attributes specific to certain bird species, you would need to change this class, potentially affecting unrelated parts of your code.

public class BirdWithoutSRP {
        private String name;
        private String color;
        private boolean canFly;

        public BirdWithoutSRP(String name, String color, boolean canFly) {
            this.name = name;
            this.color = color;
            this.canFly = canFly;
        }

        public void display() {
            System.out.println("Name: " + name);
            System.out.println("Color: " + color);
        }

        public void fly() {
            if (canFly) {
                System.out.println(name + " is flying.");
            } else {
                System.out.println(name + " cannot fly.");
            }
        }

        public void sing() {
            System.out.println(name + " is singing.");
        }

}


